{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["chatClient","StreamChat","MyAttachmentComponent","attachment","this","props","type","className","href","url","target","src","image","height","name","React","Component","setUser","id","channel","sendMessage","text","attachments","App","client","theme","Attachment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAQMA,G,OAAa,IAAIC,IAAW,iBAG5BC,E,uKACM,IACDC,EAAcC,KAAKC,MAAnBF,WACP,MAAwB,YAApBA,EAAWG,KAEX,yBAAKC,UAAU,WAAf,WAEE,uBAAGC,KAAML,EAAWM,IAAKC,OAAO,UAC9B,yBAAKC,IAAKR,EAAWS,MAAOC,OAAQ,UAAW,6BAC9CV,EAAWW,OAKX,uCAAY,kBAAC,IAAeV,KAAKC,Y,GAdVU,IAAMC,WAmB1ChB,EAAWiB,QACT,CACKC,GAAI,kBACJJ,KAAM,gBACNF,MAAO,0EAzBI,4HA8BlB,IAAMO,EAAUnB,EAAWmB,QAAQ,YAAa,SAAU,CAExDP,MAAO,kFACPE,KAAM,kBAURK,EAAQC,YAAY,CAClBC,KAAM,6FACNC,YATkB,CAAC,CACnBhB,KAAM,UACNQ,KAAM,SACNL,IAAK,wBACLG,MAAO,4BAQT,IAaeW,EAbH,kBACV,kBAAC,IAAD,CAAMC,OAAQxB,EAAYyB,MAAO,aAC/B,kBAAC,IAAD,CAASN,QAASA,EAASO,WAAYxB,GACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,OAEF,kBAAC,IAAD,SCrDcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5fcf9511.chunk.js","sourcesContent":["import React from 'react';\nimport { Chat, Channel, Attachment } from 'stream-chat-react';\nimport { ChannelHeader, MessageList, Window } from 'stream-chat-react';\nimport { MessageInput, Thread } from 'stream-chat-react';\nimport { StreamChat } from 'stream-chat';\n\nimport 'stream-chat-react/dist/css/index.css';\n\nconst chatClient = new StreamChat('gx5a64bj4ptz');\nconst userToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoid2hpdGUtc2lsZW5jZS04In0.DD83-q3tJPrRn1a_-lhk3pG7JOAoU-jznIMGfFLvFys';\n\nclass MyAttachmentComponent extends React.Component {\n  render() {\n    const {attachment} = this.props;\n    if (attachment.type === 'product') {\n      return (\n        <div className=\"product\">\n          Product:\n          <a href={attachment.url} target=\"_blank\">\n            <img src={attachment.image} height={'100px'} /><br />\n            {attachment.name}\n          </a>\n        </div>\n      );\n    } else {\n      return <div>testing<Attachment {...this.props} /></div>\n    }\n  }\n}\n\nchatClient.setUser(\n  {\n       id: 'white-silence-8',\n       name: 'White silence',\n       image: 'https://getstream.io/random_svg/?id=white-silence-8&name=White+silence'\n  },\n  userToken,\n);\n\nconst channel = chatClient.channel('messaging', 'godevs', {\n  // add as many custom fields as you like\n  image: 'https://cdn.chrisshort.net/testing-certificate-chains-in-go/GOPHER_MIC_DROP.png',\n  name: 'Talk about Go',\n});\n\nconst attachments = [{\n  type: 'product',\n  name: 'iPhone',\n  url: 'https://goo.gl/ppFmcR',\n  image: 'https://goo.gl/J2gQpi',\n}]\n\nchannel.sendMessage({\n  text: 'Your selected product is out of stock, would you like to select one of these alternatives?',\n  attachments: attachments,\n});\n\nconst App = () => (\n  <Chat client={chatClient} theme={'messaging'}>\n    <Channel channel={channel} Attachment={MyAttachmentComponent}>\n      <Window>\n        <ChannelHeader />\n        <MessageList />\n        <MessageInput />\n      </Window>\n      <Thread />\n    </Channel>\n  </Chat>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}